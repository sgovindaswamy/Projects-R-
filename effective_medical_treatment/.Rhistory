res <- getmode(data$Type.of.Breast.Surgery)
print(res)
original_data <- data #storing the original data in another variable
View(original_data)
data[data == ""] <- NA
res <- getmode(data$Type.of.Breast.Surgery)
print(res)
data$Type.of.Breast.Surgery[is.na(data$Type.of.Breast.Surgery)] <- res
View(data)
for (col in names(data)) {
mode_value <- getmode(data[[col]])
data[[col]][is.na(data[[col]])] <- mode_value
}
View(data)
preprocessed_data_summary <- dfSummary(original_data)
view(preprocessed_data_summary, file = "C:/Users/sanja/Documents/Github/Projects-R-/Survival_analysis/preprocessed_data_summary.html")
preprocessed_data_summary <- dfSummary(data)
view(preprocessed_data_summary, file = "C:/Users/sanja/Documents/Github/Projects-R-/Survival_analysis/preprocessed_data_summary.html")
for (col in names(data)) {
mode_value <- getmode(data[[col]])
data[[col]][is.na(data[[col]])] <- mode_value
} #iterate through all columns
preprocessed_data_summary <- dfSummary(data)
view(preprocessed_data_summary, file = "C:/Users/sanja/Documents/Github/Projects-R-/Survival_analysis/preprocessed_data_summary.html")
View(original_data)
View(original_data)
setwd("C:/Users/sanja/Documents/GitHub/Projects-R-/Assessing_the_effectiveness_of_medical_treatment")
current_dir <- getwd()
install.packages("openxlsx")
library(openxlsx)
data <- read.csv("kidney_stone_data.csv")
setwd("C:/Users/sanja/Documents/GitHub/Projects-R-/Assessing_the_effectiveness_of_medical_treatment")
current_dir <- getwd()
install.packages("openxlsx")
library(openxlsx)
data <- read.csv("kidney_stone_data.csv")
install.packages("openxlsx")
setwd("C:/Users/sanja/Documents/GitHub/Projects-R-/Assessing_the_effectiveness_of_medical_treatment")
current_dir <- getwd()
install.packages("openxlsx")
library(openxlsx)
data <- read.csv("kidney_stone_data.csv")
View(data)
library(ggplot2)
View(data)
View(data)
ggplot(data = data, aes(x = treatment, y=success)) + (stat_summary(fun = mean, geom = "bar", fill = "skyblue")+
labs = ("Overall success rate by treatment"))
ggplot(data = data, aes(x = treatment, y=success)) + stat_summary(fun = mean, geom = "bar", fill = "skyblue") +
labs(title = "Overall success rate by treatment", x = "Treatment", y = "mean success rate")
View(data)
ggplot(data = data, aes(x= treatment, y=success, fill=stone_size)) + stat_summary(fun = mean, geom="bar", fill="dodge") +
labs(title = "Overall success rate by treatment and kidney stone size", x= "Treatment", y = "mean success rate")
ggplot(data = data, aes(x= treatment, y=success, fill=stone_size)) + stat_summary(fun = mean, geom="bar", fill="dodge") +
labs(title = "Overall success rate by treatment and kidney stone size")
ggplot(data = data, aes(x= treatment, y=success, fill=stone_size)) + stat_summary(fun = mean, geom="bar", position ="dodge") +
labs(title = "Overall success rate by treatment and kidney stone size", x = "Treatment", y = "mean success rate")
View(data)
View(data)
table(treatment, success)
View(data)
table(data$treatment, data$success)
prop.table(table(data$treatment, data$success), 1)
table(data$treatment, data$success, data$stone_size)
prop.table(table(data$treatment, data$success, data$stone_size), c(1, 2))
prop.table(table(data$treatment, data$success, data$stone_size), c(1, 3))
prop.table(table(data$treatment, data$success, data$stone_size), c(1, 2))
chisq.test(table(x= data$treatment, y=data$success, simulate.p.value = TRUE))
View(data)
chisq.test(table(x= data$treatment, y=data$success))
chisq.test(table(data$treatment, data$success))
chisq.test(table(data$stone_size, data$treatment, data$success))
model <- glm(cbind(data$treatment, data$success) ~ 1, family = poisson())
summary(model)
#Step 3: Statistical test to identify simpson paradox
table_treatment_success <- table(data$treatment, data$success)
model <- glm(cbind(table_treatment_success[, 1], table_treatment_success[, 2]) ~ 1, family = poisson())
summary(model)
#Step 3: Statistical test to identify simpson paradox
table_treatment_success <- table(data$treatment, data$success)
# Fit the log-linear model (Poisson regression)
model <- glm(cbind(table_treatment_success), family = poisson())
# Summary of the model
summary(model)
#Step 3: Statistical test to identify simpson paradox
table_treatment_success <- table(data$treatment, data$success)
# Fit a log-linear model (Poisson regression) to the contingency table
model <- glm(cbind(table_treatment_success[,1], table_treatment_success[,2]) ~ 1, family = poisson())
# Summary of the model
summary(model)
# Chi-squared test for the entire dataset
chisq_test_all <- chisq.test(table(data$treatment, data$success))
print(chisq_test_all)
# Chi-squared test for each subset
for (stone_size in stone_size_levels) {
cat("Chi-squared test for stone_size:", stone_size, "\n")
subset_data <- subset(data, stone_size == stone_size)
chisq_test_subset <- chisq.test(table(subset_data$treatment, subset_data$success))
print(chisq_test_subset)
cat("\n")
}
# Fit a log-linear model (Poisson regression) for overall treatment and success
model_overall <- glm(cbind(table_treatment_success[, 1], table_treatment_success[, 2]) ~ 1, family = poisson())
summary(model_overall)
install.packages("stats")
library(stats)
install.packages("stats")
install.packages("stats")
model_binary <- glm(success ~ treatment, family = binomial(), data = data)
summary(model_binary)
model_triple_var <- glm(success ~ treatment + tone_size, family = binomial(), data = data)
summary(model_triple_var)
model_triple_var <- glm(success ~ treatment + stone_size, family = binomial(), data = data)
summary(model_triple_var)
pred_model_binary <- predict(model_binary, type = "response")
model_binary <- glm(success ~ treatment, family = binomial(), data = data)
summary(model_binary)
pred_model_binary <- predict(model_binary, type = "response")
data$pred1 <- pred_model_binary
model_triple_var <- glm(success ~ treatment + stone_size, family = binomial(), data = data)
summary(model_triple_var)
pred_model_triple <- predict(model_triple_var, type = "response")
data$pred2 <- pred_model_triple
# Plot Predicted Probabilities for both models
ggplot(data) +
geom_jitter(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), method = "loess", se = FALSE, size = 1) +
geom_jitter(aes(x = treatment, y = pred2, color = "Model 2 (with stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred2, color = "Model 2 (with stone_size)"), method = "loess", se = FALSE, size = 1) +
labs(title = "Comparison of Predicted Probabilities for Both Models",
y = "Predicted Probability of Success") +
theme_minimal() +
scale_color_manual(values = c("blue", "red")) +
theme(legend.title = element_blank())
# Plot Predicted Probabilities for both models
ggplot2(data) +
geom_jitter(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), method = "loess", se = FALSE, size = 1) +
geom_jitter(aes(x = treatment, y = pred2, color = "Model 2 (with stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred2, color = "Model 2 (with stone_size)"), method = "loess", se = FALSE, size = 1) +
labs(title = "Comparison of Predicted Probabilities for Both Models",
y = "Predicted Probability of Success") +
theme_minimal() +
scale_color_manual(values = c("blue", "red")) +
theme(legend.title = element_blank())
# Plot Predicted Probabilities for both models
ggplot(data) +
geom_jitter(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), method = "loess", se = FALSE, size = 1) +
geom_jitter(aes(x = treatment, y = pred2, color = "Model 2 (with stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred2, color = "Model 2 (with stone_size)"), method = "loess", se = FALSE, size = 1) +
labs(title = "Comparison of Predicted Probabilities for Both Models",
y = "Predicted Probability of Success") +
theme_minimal() +
scale_color_manual(values = c("blue", "red")) +
theme(legend.title = element_blank())
View(data)
# Plot Predicted Probabilities for both models
ggplot(data) +
geom_jitter(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), method = "loess", se = FALSE, size = 1) +
geom_jitter(aes(x = treatment, y = pred2, color = "Model 2 (with stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred2, color = "Model 2 (with stone_size)"), method = "loess", se = FALSE, size = 1) +
labs(title = "Comparison of Predicted Probabilities for Both Models",
y = "Predicted Probability of Success") +
theme_minimal() +
scale_color_manual(values = c("blue", "red")) +
theme(legend.title = element_blank())
# Plot Predicted Probabilities for both models
ggplot(data) +
geom_jitter(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), method = "loess", se = FALSE, size = 1) +
geom_jitter(aes(x = treatment, y = pred2, color = "Model 2 (with stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred2, color = "Model 2 (with stone_size)"), method = "loess", se = FALSE, size = 1) +
labs(title = "Comparison of Predicted Probabilities for Both Models",
y = "Predicted Probability of Success") +
theme_minimal() +
scale_color_manual(values = c("blue", "red")) +
theme(legend.title = element_blank())
library(ggplot2)
# Plot Predicted Probabilities for both models
ggplot(data) +
geom_jitter(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), method = "loess", se = FALSE, size = 1) +
geom_jitter(aes(x = treatment, y = pred2, color = "Model 2 (with stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred2, color = "Model 2 (with stone_size)"), method = "loess", se = FALSE, size = 1) +
labs(title = "Comparison of Predicted Probabilities for Both Models",
y = "Predicted Probability of Success") +
theme_minimal() +
scale_color_manual(values = c("blue", "red")) +
theme(legend.title = element_blank())
# Plot Predicted Probabilities for both models, including stone_size in facets
ggplot(data) +
geom_jitter(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), method = "loess", se = FALSE, size = 1) +
geom_jitter(aes(x = treatment, y = pred2, color = "Model 2 (with stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred2, color = "Model 2 (with stone_size)"), method = "loess", se = FALSE, size = 1) +
facet_wrap(~stone_size, ncol = 1) +  # Facet by stone_size (this will create separate panels)
labs(title = "Comparison of Predicted Probabilities for Both Models",
y = "Predicted Probability of Success") +
theme_minimal() +
scale_color_manual(values = c("blue", "red")) +
theme(legend.title = element_blank())
# Plot Predicted Probabilities for both models in a single plot
ggplot(data) +
geom_jitter(aes(x = treatment, y = pred1, color = as.factor(stone_size), shape = "Model 1 (no stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred1, color = as.factor(stone_size), group = stone_size, linetype = "Model 1 (no stone_size)"), method = "loess", se = FALSE, size = 1) +
geom_jitter(aes(x = treatment, y = pred2, color = as.factor(stone_size), shape = "Model 2 (with stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred2, color = as.factor(stone_size), group = stone_size, linetype = "Model 2 (with stone_size)"), method = "loess", se = FALSE, size = 1) +
labs(title = "Comparison of Predicted Probabilities for Both Models",
y = "Predicted Probability of Success",
color = "Stone Size") +  # Legend title for stone_size
theme_minimal() +
scale_color_manual(values = c("blue", "red")) +  # Adjust color palette if needed
theme(legend.title = element_blank())
# Plot Predicted Probabilities for both models in a single plot
ggplot(data) +
geom_jitter(aes(x = treatment, y = pred1, color = as.factor(stone_size), shape = "Model 1 (no stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred1, color = as.factor(stone_size), group = stone_size, linetype = "Model 1 (no stone_size)"), method = "loess", se = FALSE, size = 1) +
geom_jitter(aes(x = treatment, y = pred2, color = as.factor(stone_size), shape = "Model 2 (with stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred2, color = as.factor(stone_size), group = stone_size, linetype = "Model 2 (with stone_size)"), method = "loess", se = FALSE, size = 1) +
labs(title = "Comparison of Predicted Probabilities for Both Models",
y = "Predicted Probability of Success",
color = "Stone Size") +  # Legend title for stone_size
theme_minimal() +
scale_color_manual(values = c("blue", "red")) +  # Adjust color palette if needed
theme(legend.title = element_blank())
# Plot Predicted Probabilities for both models
ggplot(data) +
geom_jitter(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), method = "loess", se = FALSE, size = 1) +
geom_jitter(aes(x = treatment, y = pred2, color = "Model 2 (with stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred2, color = "Model 2 (with stone_size)"), method = "loess", se = FALSE, size = 1) +
labs(title = "Comparison of Predicted Probabilities for Both Models",
y = "Predicted Probability of Success") +
theme_minimal() +
scale_color_manual(values = c("blue", "red")) +
theme(legend.title = element_blank())
setwd("C:/Users/sanja/Documents/GitHub/Projects-R-/Assessing_the_effectiveness_of_medical_treatment")
current_dir <- getwd()
install.packages("openxlsx")
library(openxlsx)
library(ggplot2)
install.packages("stats")
library(stats)
data <- read.csv("kidney_stone_data.csv")
############## Descriptive statistics visualization##########################""
#Overall success rate in an aggreated view without considering the confounder variable
ggplot(data = data, aes(x = treatment, y=success)) + stat_summary(fun = mean, geom = "bar", fill = "skyblue") +
labs(title = "Overall success rate by treatment", x = "Treatment", y = "mean success rate")
#Success rate in a non-aggregrated view using kidney stone size as the confounder variable
ggplot(data = data, aes(x= treatment, y=success, fill=stone_size)) + stat_summary(fun = mean, geom="bar", position ="dodge") +
labs(title = "Overall success rate by treatment and kidney stone size", x = "Treatment", y = "mean success rate")
###########################################################################
#Step 1:
table(data$treatment, data$success)
prop.table(table(data$treatment, data$success), 1)
#Step 2:
table(data$treatment, data$success, data$stone_size)
prop.table(table(data$treatment, data$success, data$stone_size), c(1, 2))
#Step 3: Statistical test to identify simpson paradox
table_treatment_success <- table(data$treatment, data$success)
model_binary <- glm(success ~ treatment, family = binomial(), data = data)
summary(model_binary)
pred_model_binary <- predict(model_binary, type = "response")
data$pred1 <- pred_model_binary
model_triple_var <- glm(success ~ treatment + stone_size, family = binomial(), data = data)
summary(model_triple_var)
pred_model_triple <- predict(model_triple_var, type = "response")
data$pred2 <- pred_model_triple
# Plot Predicted Probabilities for both models
ggplot(data) +
geom_jitter(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), method = "loess", se = FALSE, size = 1) +
geom_jitter(aes(x = treatment, y = pred2, color = "Model 2 (with stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred2, color = "Model 2 (with stone_size)"), method = "loess", se = FALSE, size = 1) +
labs(title = "Comparison of Predicted Probabilities for Both Models",
y = "Predicted Probability of Success") +
theme_minimal() +
scale_color_manual(values = c("blue", "red")) +
theme(legend.title = element_blank())
View(data)
# Plot Predicted Probabilities for both models
ggplot(data) +
geom_jitter(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), method = "loess", se = FALSE, size = 1) +
geom_jitter(aes(x = treatment, y = pred2, color = "Model 2 (2 different stone size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred2, color = "Model 2 (2 different stone size)"), method = "loess", se = FALSE, size = 1) +
labs(title = "Comparison of Predicted Probabilities for Both Models",
y = "Predicted Probability of Success") +
theme_minimal() +
scale_color_manual(values = c("blue", "red")) +
theme(legend.title = element_blank())
interaction.plot(x.factor = data$treatment,
trace.factor = data$stone_size,
response = data$pred1,
type = "b",
col = c("blue", "red"),
legend = TRUE,
xlab = "Treatment",
ylab = "Predicted Probability of Success",
main = "Interaction Plot for Model 1 (No Stone Size)")
interaction.plot(x.factor = data$treatment,
trace.factor = data$stone_size,
response = data$pred1,
type = "b",
col = c("blue", "red"),
legend = TRUE,
xlab = "Treatment",
ylab = "Predicted Probability of Success",
main = "Interaction Plot for Model 1 (No Stone Size)")
interaction.plot(x.factor = data$treatment,
trace.factor = data$stone_size,
response = data$pred2,
type = "b",
col = c("blue", "red"),
legend = TRUE,
xlab = "Treatment",
ylab = "Predicted Probability of Success",
main = "Interaction Plot for Model 1 (No Stone Size)")
interaction.plot(x.factor = data$treatment,
trace.factor = data$stone_size,
response = data$pred1,
type = "b",
col = c("blue", "red"),
legend = TRUE,
xlab = "Treatment",
ylab = "Predicted Probability of Success",
main = "Interaction Plot for Model 1 (No Stone Size)")
interaction.plot(x.factor = data$treatment,
trace.factor = data$stone_size,
response = data$pred1,
type = "b",
col = c("blue", "red"),
legend = TRUE,
xlab = "Treatment",
ylab = "Predicted Probability of Success",
main = "Interaction Plot for Model 1 (No Stone Size)")
interaction.plot(x.factor = data$treatment,
trace.factor = data$stone_size,
response = data$pred2,
type = "b",
col = c("blue", "red"),
legend = TRUE,
xlab = "Treatment",
ylab = "Predicted Probability of Success",
main = "Interaction Plot for Model 1 (No Stone Size)")
interaction.plot(x.factor = data$treatment,
trace.factor = data$stone_size,
response = data$pred2,
type = "b",
col = c("blue", "red"),
legend = TRUE,
xlab = "Treatment",
ylab = "Predicted Probability of Success",
main = "Interaction Plot for Model 1 (No Stone Size)")
interaction.plot(x.factor = data$treatment,
trace.factor = data$stone_size,
response = data$pred2,
type = "b",
col = c("blue", "red"),
legend = TRUE,
xlab = "Treatment",
ylab = "Predicted Probability of Success",
main = "Interaction Plot for with Stone Size")
interaction.plot(x.factor = data$treatment,
response = data$pred1,  # Use the predicted probabilities for Model 2
type = "b",  # Both points and lines
col = c("blue"),  # Blue color for the line
legend = TRUE,
xlab = "Treatment",
ylab = "Predicted Probability of Success",
main = "Interaction Plot without Stone Size")
View(chisq_test_all)
View(data)
interaction.plot(x.factor = data$success,
trace.factor = data$stone_size,
response = data$pred2,
type = "b",
col = c("blue", "red"),
legend = TRUE,
xlab = "Treatment",
ylab = "Predicted Probability of Success",
main = "Interaction Plot for with Stone Size")
interaction.plot(x.factor = data$success,
trace.factor = data$treatment
response = data$pred1,  # Use the predicted probabilities for Model 2
type = "b",  # Both points and lines
col = c("blue"),  # Blue color for the line
legend = TRUE,
xlab = "Treatment",
ylab = "Predicted Probability of Success",
main = "Interaction Plot without Stone Size")
# Pairwise comparison of treatment, stone_size, and predicted probabilities
ggpairs(data[, c("success", "stone_size", "pred1", "pred2")],
aes(color = as.factor(stone_size), alpha = 0.6))
library(GGally)
ggpairs(data[, c("success", "stone_size", "pred1", "pred2")],
aes(color = as.factor(stone_size), alpha = 0.6))
# Interaction plot without stone_size
interaction.plot(x.factor = data$success,
trace.factor = data$treatment,
response = data$pred1,  # Use the predicted probabilities for Model 1
type = "b",  # Both points and lines
col = c("blue"),  # Blue color for the line
legend = TRUE,
xlab = "Success",
ylab = "Predicted Probability of Success",
main = "Interaction Plot for Model 1 (Without Stone Size)")
# Plot Predicted Probabilities for both models
ggplot(data) +
geom_jitter(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), method = "loess", se = FALSE, size = 1) +
geom_jitter(aes(x = treatment, y = pred2, color = "Model 2 (2 different stone size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred2, color = "Model 2 (2 different stone size)"), method = "loess", se = FALSE, size = 1) +
labs(title = "Comparison of Predicted Probabilities for Both Models",
y = "Predicted Probability of Success") +
theme_minimal() +
scale_color_manual(values = c("blue", "red")) +
theme(legend.title = element_blank())
setwd("C:/Users/sanja/Documents/GitHub/Projects-R-/Assessing_the_effectiveness_of_medical_treatment")
current_dir <- getwd()
install.packages("openxlsx")
library(openxlsx)
library(ggplot2)
install.packages("stats")
library(stats)
data <- read.csv("kidney_stone_data.csv")
############## Descriptive statistics visualization##########################""
#Overall success rate in an aggreated view without considering the confounder variable
ggplot(data = data, aes(x = treatment, y=success)) + stat_summary(fun = mean, geom = "bar", fill = "skyblue") +
labs(title = "Overall success rate by treatment", x = "Treatment", y = "mean success rate")
#Success rate in a non-aggregrated view using kidney stone size as the confounder variable
ggplot(data = data, aes(x= treatment, y=success, fill=stone_size)) + stat_summary(fun = mean, geom="bar", position ="dodge") +
labs(title = "Overall success rate by treatment and kidney stone size", x = "Treatment", y = "mean success rate")
###########################################################################
#Step 1: Contingency table using x and y
table(data$treatment, data$success)
prop.table(table(data$treatment, data$success), 1)
#Step 2: Contingency table using x and y along with confounder variable
table(data$treatment, data$success, data$stone_size)
prop.table(table(data$treatment, data$success, data$stone_size), c(1, 2))
#Step 3: Multinomial logistic regression to infer simpson paradox and identify best treatment
table_treatment_success <- table(data$treatment, data$success)
model_binary <- glm(success ~ treatment, family = binomial(), data = data)
summary(model_binary)
pred_model_binary <- predict(model_binary, type = "response")
data$pred1 <- pred_model_binary
model_triple_var <- glm(success ~ treatment + stone_size, family = binomial(), data = data)
summary(model_triple_var)
pred_model_triple <- predict(model_triple_var, type = "response")
data$pred2 <- pred_model_triple
# Plot Predicted Probabilities for both models
ggplot(data) +
geom_jitter(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), method = "loess", se = FALSE, size = 1) +
geom_jitter(aes(x = treatment, y = pred2, color = "Model 2 (2 different stone size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred2, color = "Model 2 (2 different stone size)"), method = "loess", se = FALSE, size = 1) +
labs(title = "Comparison of Predicted Probabilities for Both Models",
y = "Predicted Probability of Success") +
theme_minimal() +
scale_color_manual(values = c("blue", "red")) +
theme(legend.title = element_blank())
###############################################################################################"
install.packages("openxlsx")
AIC(model_binary, model_triple_var)
setwd("C:/Users/sanja/Documents/GitHub/Projects-R-/Assessing_the_effectiveness_of_medical_treatment")
current_dir <- getwd()
install.packages("openxlsx")
library(openxlsx)
library(ggplot2)
install.packages("stats")
library(stats)
data <- read.csv("kidney_stone_data.csv")
############## Descriptive statistics visualization##########################""
#Overall success rate in an aggreated view without considering the confounder variable
ggplot(data = data, aes(x = treatment, y=success)) + stat_summary(fun = mean, geom = "bar", fill = "skyblue") +
labs(title = "Overall success rate by treatment", x = "Treatment", y = "mean success rate")
#Success rate in a non-aggregrated view using kidney stone size as the confounder variable
ggplot(data = data, aes(x= treatment, y=success, fill=stone_size)) + stat_summary(fun = mean, geom="bar", position ="dodge") +
labs(title = "Overall success rate by treatment and kidney stone size", x = "Treatment", y = "mean success rate")
###########################################################################
#Step 1: Contingency table using x and y
table(data$treatment, data$success)
prop.table(table(data$treatment, data$success), 1)
#Step 2: Contingency table using x and y along with confounder variable
table(data$treatment, data$success, data$stone_size)
prop.table(table(data$treatment, data$success, data$stone_size), c(1, 2))
#Step 3: Multinomial logistic regression to infer simpson paradox and identify best treatment
table_treatment_success <- table(data$treatment, data$success)
model_binary <- glm(success ~ treatment, family = binomial(), data = data)
summary(model_binary)
pred_model_binary <- predict(model_binary, type = "response")
data$pred1 <- pred_model_binary
model_triple_var <- glm(success ~ treatment + stone_size, family = binomial(), data = data)
summary(model_triple_var)
pred_model_triple <- predict(model_triple_var, type = "response")
data$pred2 <- pred_model_triple
# Plot Predicted Probabilities for both models
ggplot(data) +
geom_jitter(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred1, color = "Model 1 (no stone_size)"), method = "loess", se = FALSE, size = 1) +
geom_jitter(aes(x = treatment, y = pred2, color = "Model 2 (2 different stone size)"), width = 0.2, height = 0, alpha = 0.6) +
geom_smooth(aes(x = treatment, y = pred2, color = "Model 2 (2 different stone size)"), method = "loess", se = FALSE, size = 1) +
labs(title = "Comparison of Predicted Probabilities for Both Models",
y = "Predicted Probability of Success") +
theme_minimal() +
scale_color_manual(values = c("blue", "red")) +
theme(legend.title = element_blank())
###############################################################################################"
AIC(model_binary, model_triple_var)
install.packages("stats")
